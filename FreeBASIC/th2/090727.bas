#include "fbgfx.bi"
declare sub drawtile (tile() as ubyte, x as double, y as double, w as double, h as double, d as integer)
declare sub loadimage (file as string, b as integer, tile() as ubyte)
declare sub loadmap (file as string)
type object
    x as double
    y as double
    sx as double
    sy as double
    d as integer
    st as integer
    cy as integer
    ac as double
    da as double
    ma as integer
    jmp as integer
end type
type image
    i(16,16,3) as ubyte
end type

dim as object char
redim as object snake(1)
dim as image floor1, floor2, ladder, char1, char2, char3, char4, snake1, snake2, snake3
dim as integer sw, sh, x, y, snkcou
dim shared as ubyte map(20,15), colmap(20,15)
dim as double scw, sch, tim, cycle, wlk, old
dim as string binn
const grav=0.2
boot:
open "config.ini" for input as 1
if eof(1) then
    close 1
    open "config.ini" for output as 1
    print #1,"# Treasure Hunt 2 config file"
    print #1,"# Do not edit this file if you don't know what you're doing"
    print #1,"# --------------"
    print #1,"# Treasure Hunt 2 (c) 2009 Electrokinesis Studios"
    print #1,"# --------------"
    print #1,"# Screen resolution"
    print #1,"res=640x480"
    print #1,"# Timer"
    print #1,"tim=10"
    close 1
    goto boot
endif
do until left(binn,4)="res=":input #1, binn:loop
for x=5 to len(binn)
    if mid(binn,x,1)="x" then y=x
next x
sw=val(mid(binn,5,y-5))
sh=val(mid(binn,y+1,len(binn)-y+1))
do until left(binn,4)="tim=":input #1, binn:loop
tim=val(mid(binn,5,len(binn)-4))
close 1
screenres sw,sh,16
windowtitle "Treasure Hunt 2"
scw = sw/320
sch = sh/240

loadimage ".\data\gfx\char.abn",0,char1.i()
loadimage ".\data\gfx\char.abn",1,char2.i()
loadimage ".\data\gfx\char.abn",2,char3.i()
loadimage ".\data\gfx\char.abn",3,char4.i()
loadimage ".\data\gfx\snake.abn",0,snake1.i()
loadimage ".\data\gfx\snake.abn",1,snake2.i()
loadimage ".\data\gfx\snake.abn",2,snake3.i()
loadimage ".\data\gfx\tiles.abn",0,floor1.i()
loadimage ".\data\gfx\tiles.abn",1,floor2.i()
loadimage ".\data\gfx\tiles.abn",2,ladder.i()
loadmap ".\data\map1.abm"
char.x=16:char.y=16:char.d=1
char.ac=0.1:char.da=0.09:char.ma=2:char.jmp=3

line (0,0)-(sw,sh),rgb(130,80,0),BF
snkcou = 0
for y = 0 to 14:for x = 0 to 19
    select case map(x,y)
    case 1:drawtile floor1.i(), x*16*scw, y*16*sch, scw, sch, 1
    case 2:drawtile floor2.i(), x*16*scw, y*16*sch, scw, sch, 1
    case 3:drawtile ladder.i(), x*16*scw, y*16*sch, scw, sch, 1
    case 4:char.x=x*16:char.y=y*16
    case 5:snkcou+=1
    redim preserve snake(snkcou) as object
    snake(snkcou-1).x=x*16:snake(snkcou-1).y=y*16
    end select
next x:print "":next y

do
screenlock
line ((fix(char.x/16)-2)*16*scw,(fix(char.y/16)-2)*16*sch)-((fix(char.x/16)+3)*16*scw-1,(fix(char.y/16)+4)*16*sch-1),rgb(130,80,0),BF
for x = 0 to ubound(snake):line (fix(snake(x).x/16)*16*scw,fix(snake(x).y/16)*16*sch)-(fix(snake(x).x/16)*16*scw,fix(snake(x).y/16)*16*sch),rgb(130,80,0),BF:next x
drawtile char1.i(), char.x*scw, char.y*sch, scw, sch, char.d
select case char.cy
case 1, 3:drawtile char2.i(), char.x*scw, (char.y+16)*sch, scw, sch, char.d
case 2:drawtile char3.i(), char.x*scw, (char.y+16)*sch, scw, sch, char.d
case 4:drawtile char4.i(), char.x*scw, (char.y+16)*sch, scw, sch, char.d
case 5:drawtile char3.i(), char.x*scw, (char.y+16)*sch, scw, sch, char.d
end select
select case snake(0).cy
case 1:for x = 0 to ubound(snake):drawtile snake1.i(), snake(x).x*scw, snake(x).y*sch, scw, sch, snake(x).d:next x
case 2, 4:for x = 0 to ubound(snake):drawtile snake2.i(), snake(x).x*scw, snake(x).y*sch, scw, sch, snake(x).d:next x
case 3:for x = 0 to ubound(snake):drawtile snake3.i(), snake(x).x*scw, snake(x).y*sch, scw, sch, snake(x).d:next x
end select
for y=fix(char.y/16)-2 to fix(char.y/16)+3:for x=fix(char.x/16)-2 to fix(char.x/16)+2
    select case map(x,y)
    case 1:drawtile floor1.i(), x*16*scw, y*16*sch, scw, sch, 1
    case 2:drawtile floor2.i(), x*16*scw, y*16*sch, scw, sch, 1
    case 3:drawtile ladder.i(), x*16*scw, y*16*sch, scw, sch, 1
    end select
next x:next y
screenunlock
char.x+=char.sx:char.y+=char.sy
if cycle<=0 then
    if wlk and char.st then
        char.cy+=1:if char.cy>=5 then char.cy=1
    endif
    snake(0).cy+=1:if snake(0).cy>=5 then snake(0).cy=1
    cycle = 10
endif
if char.sy < 0 then if colmap(int((char.x+2)/16),int(char.y/16))=1 or colmap(int((char.x+8)/16),int(char.y/16))=1 then char.sy=0:char.y=int(char.y/16+1)*16
if char.sx > 0 then if colmap(int((char.x+16)/16),int(char.y/16))=1 or colmap(int((char.x+16)/16),int((char.y+16)/16))=1 then char.sx=0:char.x=int(char.x/16)*16
if char.sx < 0 then if colmap(int((char.x)/16),int(char.y/16))=1 or colmap(int(char.x/16),int((char.y+16)/16))=1 then char.sx=0:char.x=int(char.x/16+1)*16
if char.sx<>0 or char.sy<>0 then if colmap(int((char.x+4)/16),int((char.y+32)/16))=1 or colmap(int((char.x+10)/16),int((char.y+32)/16))=1 then:char.sy=0:char.st=1:char.y=int(char.y/16)*16:else:char.st=0:endif
if colmap(int((char.x+4)/16),int((char.y+32)/16))=2 or colmap(int((char.x+10)/16),int((char.y+32)/16))=2 then char.st=1
if char.st = 0 then:char.sy+=grav:char.cy=5
    if char.sy<>0 then
        if char.sx > 0 then if colmap(int((char.x+16)/16),int((char.y+32)/16))=1 then char.sx=0:char.x=int(char.x/16)*16
        if char.sx < 0 then if colmap(int((char.x)/16),int((char.y+32)/16))=1 then char.sx=0:char.x=int(char.x/16+1)*16
    endif
elseif wlk=0 then char.cy=1:endif
if not (multikey(fb.sc_up) or multikey(fb.sc_down)) then
    if colmap(int((char.x+4)/16),int((char.y+32)/16))=2 or colmap(int((char.x+10)/16),int((char.y+32)/16))=2 then char.sy=0
    wlk=0
endif
if not (multikey(fb.sc_left) or multikey(fb.sc_right)) then
    if char.sx>0 then char.sx-=char.da:if char.sx < char.da then char.sx = 0
    if char.sx<0 then char.sx+=char.da:if char.sx > -char.da then char.sx = 0
    wlk=0
endif
if multikey(fb.sc_up) then
    if colmap(int((char.x+4)/16),int((char.y+30)/16))=2 or colmap(int((char.x+10)/16),int((char.y+30)/16))=2 then:char.sy=-1:wlk=1
    elseif char.st=1 then:char.sy=-char.jmp: char.st=0
    endif:endif
if multikey(fb.sc_down) then if colmap(int((char.x+4)/16),int((char.y+32)/16))=2 or colmap(int((char.x+10)/16),int((char.y+32)/16))=2 then char.sy=1:wlk=1
if multikey(fb.sc_left) and char.sx > -char.ma then char.sx-=char.ac: char.d=-1
if multikey(fb.sc_right) and char.sx < char.ma then char.sx+=char.ac: char.d=1
if multikey(fb.sc_left) or multikey(fb.sc_right) then wlk=1
if multikey(fb.sc_escape) then end
'sleep tim
cycle-=1
old = timer
do until timer >= old + 0.015
loop
loop

sub drawtile (tile() as ubyte, x as double, y as double, w as double, h as double, d as integer)
    dim as integer n1,n2
    if d=1 then
        for n1 = 0 TO 15:for n2 = 0 to 15
            if not (tile(n2,n1,0) = 255 and tile(n2,n1,1) = 0 and tile(n2,n1,2) = 255) then
            line (x+(n2*w),y+(n1*h))-(x+(n2*w)+w-1,y+(n1*h)+h-1),rgb(tile(n2,n1,0),tile(n2,n1,1),tile(n2,n1,2)),BF:endif
        next n2:next n1
    else
        for n1 = 0 TO 15:for n2 = 0 to 15
            if not (tile(n2,n1,0) = 255 and tile(n2,n1,1) = 0 and tile(n2,n1,2) = 255) then
            line (x+((-n2+15)*w),y+(n1*h))-(x+((-n2+15)*w)+w-1,y+(n1*h)+h-1),rgb(tile(n2,n1,0),tile(n2,n1,1),tile(n2,n1,2)),BF:endif
        next n2:next n1
    endif
end sub

sub loadimage (file as string, b as integer, tile() as ubyte)
    dim as integer x, y, z=0
    z = b*768
    open file for binary access read as #1
        if eof(1) then
            print "Error loading file "+file
            print "Press any key to terminate"
            sleep
            end
        endif
        for y = 0 to 15:for x = 0 to 15:z+=1:get #1,z,tile(x,y,0):next x:next y
        for y = 0 to 15:for x = 0 to 15:z+=1:get #1,z,tile(x,y,1):next x:next y
        for y = 0 to 15:for x = 0 to 15:z+=1:get #1,z,tile(x,y,2):next x:next y
    close #1
end sub

sub loadmap (file as string)
    dim as integer x, y, z=0
    open file for binary access read as #1
        if eof(1) then
            print "Error loading file "+file
            print "Press any key to terminate"
            sleep
            end
        endif
        for y = 0 to 14:for x = 0 to 19:z+=1:get #1,z,map(x,y):next x:next y
        for y = 0 to 14:for x = 0 to 19:z+=1:get #1,z,colmap(x,y):next x:next y
    close #1
end sub